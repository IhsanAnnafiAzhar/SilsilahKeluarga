package app.familygem;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.view.View;

import androidx.appcompat.app.AppCompatActivity;

import org.apache.commons.net.ftp.FTPClient;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.FileOutputStream;
import java.io.InputStream;

import app.familygem.constant.Extra;
import app.familygem.constant.Json;

public class LauncherActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.launcher_activity);
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) { // Tiramisu doesn't need this
            // Updates localized strings that are generated by some static methods
            getApplicationContext().getResources().updateConfiguration(getResources().getConfiguration(), null);
        }
        /*
        Import of a tree occurring after clicking on various types of links:
            https://www.familygem.app/share.php?tree=20190802224208
                Eg. in a WhatsApp message
                Clicked in Chrome in old Androids opens the choice of the app including Family Gem to directly import the tree
                Normally opens the sharing page on the website
            intent://www.familygem.app/condivisi/20200218134922.zip#Intent;scheme=https;end
                Official link on the website's sharing page
                It is the only one that seems guarantee to work, in Chrome, in the browser inside Libero, in the L90 Browser
            https://www.familygem.app/condivisi/20190802224208.zip
                Direct URL to the ZIP file
                It works in old Androids, in new ones simply the file is downloaded
        */
        Intent intent = getIntent();
        Uri uri = intent.getData();
        // By opening the app from the Recents screen, avoids re-importing a newly imported shared tree
        boolean fromHistory = (intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY;
        if (uri != null && !fromHistory) {
            String dateId;
            if (uri.getPath().equals("/share.php")) // click on the first message received
                dateId = uri.getQueryParameter("tree");
            else if (uri.getLastPathSegment().endsWith(".zip")) // click on the invitation page
                dateId = uri.getLastPathSegment().replace(".zip", "");
            else {
                U.toast(this, R.string.cant_understand_uri);
                return;
            }
            if (!BuildConfig.PASS_KEY.isEmpty()) {
                // It does not need to apply for permissions
                downloadShared(this, dateId, null);
            }
        } else {
            Intent treesIntent = new Intent(this, TreesActivity.class);
            if (Global.settings.loadTree) {
                treesIntent.putExtra(Extra.AUTO_LOAD_TREE, true); // To load the last opened tree
                treesIntent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION); // Perhaps ineffective but so be it
            }
            startActivity(treesIntent);
        }
        // Retrieves GeoNames username to store it in shared preferences
        if (!BuildConfig.PASS_KEY.isEmpty()) {
            new Thread(() -> {
                JSONObject credential = U.getCredential(Json.GEO_NAMES);
                if (credential != null) {
                    try {
                        SharedPreferences.Editor editor = U.getSharedPreferences(this).edit();
                        editor.putString(PlaceFinderTextView.GEONAMES_USER, credential.getString(Json.USER)).apply();
                    } catch (JSONException ignored) {
                    }
                }
            }).start();
        }
    }

    /**
     * Connects to the server and downloads the ZIP file to import it.
     */
    static void downloadShared(Context context, String dateId, View wheel) {
        if (wheel != null)
            wheel.setVisibility(View.VISIBLE);
        // A working thread is needed to asynchronously download a file
        new Thread(() -> {
            JSONObject credential = U.getCredential(Json.FTP);
            if (credential != null) {
                try {
                    FTPClient client = new FTPClient(); // TODO: refactor to use Retrofit
                    client.connect(credential.getString(Json.HOST), credential.getInt(Json.PORT));
                    client.enterLocalPassiveMode();
                    client.login(credential.getString(Json.USER), credential.getString(Json.PASSWORD));
                    // TODO: Maybe we could use the download manager so that we have the file also listed in 'Downloads'
                    String zipPath = context.getExternalCacheDir() + "/" + dateId + ".zip";
                    FileOutputStream fos = new FileOutputStream(zipPath);
                    String path = credential.getString(Json.SHARED_PATH) + "/" + dateId + ".zip";
                    InputStream input = client.retrieveFileStream(path);
                    if (input != null) {
                        byte[] data = new byte[1024];
                        int count;
                        while ((count = input.read(data)) != -1) {
                            fos.write(data, 0, count);
                        }
                        fos.close();
                        if (client.completePendingCommand() && NewTreeActivity.unZip(context, zipPath, null)) {
                            // If the tree was downloaded with the install referrer
                            if (Global.settings.referrer != null && Global.settings.referrer.equals(dateId)) {
                                Global.settings.referrer = null;
                                Global.settings.save();
                            }
                        } else { // Failed decompression of downloaded ZIP (eg. corrupted file)
                            downloadFailed(context, context.getString(R.string.backup_invalid), wheel);
                        }
                    } else // Did not find the file on the server
                        downloadFailed(context, context.getString(R.string.something_wrong), wheel);
                    client.logout();
                    client.disconnect();
                } catch (Exception e) {
                    downloadFailed(context, e.getLocalizedMessage(), wheel);
                }
            } else // Credentials are null
                downloadFailed(context, context.getString(R.string.something_wrong), wheel);
        }).start();
    }

    /**
     * Negative conclusion of the above method.
     */
    static void downloadFailed(Context context, String message, View wheel) {
        U.toast((Activity)context, message);
        if (wheel != null)
            ((Activity)context).runOnUiThread(() -> wheel.setVisibility(View.GONE));
        else
            context.startActivity(new Intent(context, TreesActivity.class));
    }
}
